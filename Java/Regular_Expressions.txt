1. What is Stack over flow?
=> Indefinite recursions.
2. What is the use of Log4j?
 => Used for logging exceptions.
3. What happens when we define an empty catch block ?
=> Swallows an exception.
4. Why is it a best practice to use try with resources?
=> No need for finally to close resources since when the resources are enclosed in try() then they are closed automatically
5. Why is knowledge of regex is very key in professional programming?
=> Help you to search, match and manipulate text efficiently (sequence of characters that forms a search patterns). In java. util .regex we have Pattern class (compiles the regex), Matcher (matches regex in text) and Pattern Syntax Exception which handles regex errors.
6. What do we mean by quantifiers , and groups in regex and why them as well as they two special cases or types?
=> Allow control of repetition of elements in a regex pattern. There are greedy quantifiers (match as much as possible) and lazy quantifiers (match as little as possible)
=> Groups are matched strings (substring). Can be created suing parenthesis.
7. How to implement with their symbols the following famous and main knowledge root for understanding the regular expression in any programming language?
a)Any digit and non digit => \d, \D
b)Any word character and non character => \w, \W
c)Any white space and any non white space => \s, \S
d)Start of the string =>  ^
e)End of the string => $
f)Character class => []
g)Negated character class => [^]
h)Zero or more occurrences =>  *
i)One or more occurrences => +
j)Zero or one occurrences => ?
k)Exactly n occurrence => {n}
l)At least n occurrence => {n,}
m)Between n and m occurrence => {n, m}
n)Or operator => |
o)And operator => &
p)Grouping => ()
q)Case insensitive match  => (?i)
r)Allow any content before, between and after => .*
s)Back references (Points to previous group) => \1, \2, etc.
8. Try to implement this in codes? 
-only letters from start to the end
-valid email
-replace vowels
